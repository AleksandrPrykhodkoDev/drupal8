<?php

/**
 * @file
 * Primary module hooks for nunavut_core module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\media_library\Form\FileUploadForm;
use Drupal\nunavut_core\Form\NunavutVideoFileUploadForm;
use Drupal\nunavut_core\MediaOperations;
use Drupal\nunavut_core\NodeOperations;
use Drupal\nunavut_core\ParagraphsOperations;

/**
 * Implements hook_preprocess_node().
 */
function nunavut_core_preprocess_node(array &$variables): void {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(NodeOperations::class)
    ->preprocess($variables);
}

/**
 * Implements hook_form_alter().
 */
function nunavut_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form_state->getBuildInfo()['base_form_id'])
    && $form_state->getBuildInfo()['base_form_id'] == 'node_form') {
    if (isset($form['field_content']['widget']['entity_form'])) {
      \Drupal::service('class_resolver')
        ->getInstanceFromDefinition(ParagraphsOperations::class)
        ->widgetFormAlter(
          $form['field_content']['widget']['entity_form'],
          $form_state,
          []
        );
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function nunavut_core_field_widget_layout_paragraphs_form_alter(&$element, &$form_state, $context) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ParagraphsOperations::class)
    ->widgetFormAlter($element, $form_state, $context);
}

/**
 * Implements hook_preprocess_paragraph().
 */
function nunavut_core_preprocess_paragraph(array &$variables) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ParagraphsOperations::class)
    ->preprocess($variables);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function nunavut_core_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ParagraphsOperations::class)
    ->widgetFormAlter($element, $form_state, $context);
}

/**
 * Implements hook_preprocess_media().
 */
function nunavut_core_preprocess_media(&$variables) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(MediaOperations::class)
    ->preprocess($variables);
}

/**
 * Create array of options from configuration for List(text).
 *
 * @param string $config_name
 *   Configuration name.
 * @param string $config_key
 *   Configuration key.
 * @param string $field_name
 *   Field name.
 * @param bool $clean_vertical_bar
 *   Explode option key|name separated by '|'.
 *
 * @return array
 *   Array of options.
 */
function _nunavut_core_load_allowed_values(
  string $config_name,
  string $config_key,
  string $field_name,
  bool $clean_vertical_bar = FALSE
): array {
  $value_allowed = \Drupal::configFactory()
    ->get($config_name)
    ->get($config_key);

  $records = explode("\r\n", trim($value_allowed[$field_name]));
  $result = [];

  foreach ($records as $record) {
    if ($clean_vertical_bar) {
      $record = explode('|', $record);
      $result[$record[0]] = $record[1];
    }
    else {
      $result[$record] = $record;
    }
  }

  return $result;
}

/**
 * Set dynamic allowed values for the field view modes.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_view_mode_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
) {
  return \Drupal::service('entity_display.repository')
    ->getAllViewModes();
}

/**
 * Set dynamic allowed values for the field target.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_target_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  return _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings',
    'target_field',
    TRUE
  );
}

/**
 * Set dynamic allowed values for the classes.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_classes_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  // @todo Add selection for classes based on field name and entity bundle
  return _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings',
    'classes_field'
  );
}

/**
 * Set dynamic allowed values for the borders.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_border_width_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  $result = [];

  $borders = _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings',
    'border_width_list'
  );

  foreach ($borders as $key => $name) {
    $result['border-width-' . $key] = $name;
  }

  return $result;
}

/**
 * Set dynamic allowed values for the button type.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_button_type_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  return _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings_button',
    'button_type'
  );
}

/**
 * Set dynamic allowed values for the container type.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_container_type_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  return _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings_container',
    'container_type'
  );
}

/**
 * Set dynamic allowed values for the container tag.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_container_tag_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  return _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings_container',
    'container_tag'
  );
}

/**
 * Set dynamic allowed values for the space.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_space_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  return _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings',
    'space_list',
    TRUE
  );
}

/**
 * Set dynamic allowed values for the color.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_color_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  $background_definitions = [
    'field_background_color',
    'field_description_background',
  ];

  $color_definitions = [
    'field_color',
    'field_description_color',
  ];

  $colors = _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings',
    'color_list'
  );

  $result = [];

  if (in_array($definition->getName(), $background_definitions)) {
    foreach ($colors as $color => $name) {
      $result['bg-color-' . $color] = $name;
    }

    return $result;
  }

  if ($definition->getName() == 'field_border_color') {
    foreach ($colors as $color => $name) {
      $result['border-color-' . $color] = $name;
    }

    return $result;
  }

  if (in_array($definition->getName(), $color_definitions)) {
    foreach ($colors as $color => $name) {
      $result['color-' . $color] = $name;
    }

    return $result;
  }

  return $colors;
}

/**
 * Set dynamic allowed values for the Paragraph:Image image styles.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 *
 * @see options_allowed_values()
 */
function _nunavut_core_image_style_allowed_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  $options = [];

  $styles = \Drupal::entityTypeManager()
    ->getStorage('image_style')
    ->loadMultiple();

  foreach ($styles as $style) {
    $options[$style->id()] = $style->label();
  }

  return $options;
}

/**
 * Set dynamic allowed values for the opacity.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_opacity_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  return _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings',
    'opacity'
  );
}

/**
 * Set dynamic allowed values for the opacity.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_padding_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  return _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings',
    'padding_list'
  );
}

/**
 * Set dynamic allowed values for the description position.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_dp_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  return _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings_image',
    'description_position'
  );
}

/**
 * Implements hook_theme().
 */
function nunavut_core_theme($existing, $type, $theme, $path): array {
  return [
    'paragraph_container' => [
      'variables' => [
        'container_class' => NULL,
        'content' => NULL,
        'title_suffix' => NULL,
        'tag' => NULL,
        'background_media' => NULL,
      ],
    ],
    'nunavut_page_rounded_card' => [
      'variables' => [
        'card_bg_url' => NULL,
        'title' => NULL,
        'card_content' => NULL,
        'card_button' => NULL,
        'card_border' => NULL,
      ],
    ],
    'nunavut_page_photo_card' => [
      'variables' => [
        'card' => NULL,
        'title' => NULL,
        'url' => NULL,
      ],
    ],
    'nunavut_contacts' => [
      'variables' => [
        'operator' => NULL,
      ],
    ],
    'paragraph__space' => [
      'render element' => 'element',
      'template' => 'paragraph-space',
      'base hook' => 'paragraph',
    ],
    'paragraph__image' => [
      'render element' => 'element',
      'template' => 'paragraph-image',
      'base hook' => 'paragraph',
    ],
    'paragraph__button' => [
      'render element' => 'element',
      'template' => 'paragraph-button',
      'base hook' => 'paragraph',
    ],
    'paragraph__layout_section' => [
      'render element' => 'element',
      'template' => 'paragraph-layout-section',
      'base hook' => 'paragraph',
    ],
    'paragraph__left_border' => [
      'render element' => 'element',
      'template' => 'paragraph-left-border',
      'base hook' => 'paragraph',
    ],
    'paragraph__weather' => [
      'render element' => 'element',
      'template' => 'paragraph-weather',
      'base hook' => 'paragraph',
    ],
    'block__discovery_nunavut' => [
      'render element' => 'element',
      'template' => 'block-discovery-nunavut',
      'base hook' => 'block',
    ],
    'field__paragraph__card' => [
      'render element' => 'element',
      'template' => 'field-paragraph-card',
      'base hook' => 'field',
    ],
    'yahoo_weather_field_formatter' => [
      'variables' => [
        'weather' => NULL,
      ],
    ],
    'field__paragraph__field_categories' => [
      'render element' => 'element',
      'template' => 'field-paragraph-categories',
      'base hook' => 'field',
    ],
  ];
}

/**
 * Set dynamic allowed values for the align.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_align_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  $align = _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings',
    'horizontal_align'
  );

  $valign = _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings',
    'vertical_align'
  );

  if ($definition->getName() == 'field_horisontal_align') {
    return $align;
  }

  if ($definition->getName() == 'field_vertical_align') {
    return $valign;
  }

  return $align + $valign;
}

/**
 * Set dynamic allowed values for the icon position.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_ip_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  return _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings_button',
    'icon_position'
  );
}

/**
 * Set dynamic allowed values for the card type.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function _nunavut_core_field_card_type_values(
  FieldStorageDefinitionInterface $definition,
  FieldableEntityInterface $entity = NULL
): array {
  return _nunavut_core_load_allowed_values(
    'nunavut_core.settings',
    'paragraph_settings_card',
    'card_type'
  );
}

/**
 * Implements hook_media_source_info_alter().
 */
function nunavut_core_media_source_info_alter(array &$sources) {
  if (
    empty($sources['video_file']['forms']['media_library_add'])
    || $sources['video_file']['forms']['media_library_add'] == FileUploadForm::class
  ) {
    $sources['video_file']['forms']['media_library_add'] = NunavutVideoFileUploadForm::class;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function nunavut_core_theme_suggestions_taxonomy_term(array $variables): array {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];

  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle();
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id();
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function nunavut_core_form_mailchimp_signup_subscribe_block_subscribe_newsletter_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  $form['actions']['submit']['#theme_wrappers'] = ['input__button'];
  $form['actions']['submit']['#attributes']['class'][] = 'subscribe-signup-submit';

  $form['container-all'] = [
    '#type' => 'container',
    '#weight' => 1,
    '#attributes' => [
      'class' => [
        'subscribe-signup--input',
      ],
    ],
  ];

  unset($form['mergevars']['EMAIL']['#title']);

  $form['mergevars']['EMAIL']['#attributes']['placeholder'] = 'email@email.com';
  $form['mergevars']['EMAIL']['#attributes']['size'] = '20';

  $form['container-all']['mergevars'] = $form['mergevars'];
  $form['container-all']['actions']['submit'] = $form['actions']['submit'];

  hide($form['actions']);

  unset($form['mergevars']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nunavut_core_preprocess_taxonomy_term(&$variables) {
  /** @var \Drupal\taxonomy\Entity\Term $term */

  $term = $variables['term'];
  /** @var \Drupal\nunavut_core\PageHelper $page_helper */
  $page_helper = \Drupal::service('nunavut_core.page_helper');

  if ($page_helper->isTermParentRepeat($term)) {
    $variables['term_is_parent_repeat'] = TRUE;
  }
}
