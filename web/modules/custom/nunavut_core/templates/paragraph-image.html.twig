{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished'
] %}
{% set image_classes = [
  paragraph.get('field_classes').getString()|replace({',': ' '}) ,
  paragraph.get('field_additional_classes').getString()|replace({',': ' '}) ,
] %}
{% set image_modal_attributes = create_attribute() %}
{% set media_file = file_url(media_uri) %}
{% set description = paragraph.get('field_image_description').getString() %}
{% set description_attributes = create_attribute() %}
{% set description_position = paragraph.get('field_description_position').getString()|replace({',': ' '}) %}
{% set description_classes = [
  'image-description',
  paragraph.get('field_description_background').getString()|replace({',': ' '}) ,
  paragraph.get('field_description_color').getString()|replace({',': ' '}) ,
  paragraph.get('field_description_opacity').getString()|replace({',': ' '}) ,
  description_position=='hover' ? 'description-hover' : 'description-normal'
] %}
{% set image_attributes = create_attribute()
  .addClass(image_classes)
  .addClass(border_classes)
  .setAttribute('src', media_file)
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% if title_suffix %}{{ title_suffix }}{% endif %}
    {% block content %}
      {% if image_modal %}
        <a{{ image_modal_attributes.addClass('colorbox-load').setAttribute('href', file_url(image_modal))}} >
      {% elseif image_url %}
        <a{{ image_modal_attributes.setAttribute('href', image_url)}} >
      {% else %}
        <div class="image-wrapper">
      {% endif %}
      {% if description_position == 'top' %}
        <div{{ description_attributes.addClass(description_classes) }}>{{ description }}</div>
      {% endif %}
      <img{{ image_attributes }}>
      {% if description_position != 'top' %}
        <div{{ description_attributes.addClass(description_classes) }}>{{ description }}</div>
      {% endif %}
      {% if image_modal %}
        </a>
      {% elseif image_url %}
        </a>
      {% else %}
        </div>
      {% endif %}

    {% endblock %}
  </div>
{% endblock paragraph %}
